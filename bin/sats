#!/usr/bin/env python

"""
sats

Frontend to the sats package.

"""

import sys

import sats
from sats.bulk.rescale import bulk_rescale_factor
from sats.configurations import bulk, surfaces, interstitial, vacancy
from sats.core.dynamics import molecular_dynamics, relax_structure
from sats.core.elements import Element
from sats.core.io import castep_write
from sats.ui.log import info, debug
from sats.ui.options import add_option, get, format_defaults


# Options that are referenced in the main sats part of the procedure.
_valid_structures = [
    'bulk',  # bulk lattices
    'surface',  # intermediate 2x2 surfaces
    'interstitial',  # Various interstitial constructs
    'vacancy',
]
add_option('structure', 'type', [], str, "Type of structures to generate.",
           multiple=True, valid_values=_valid_structures)
add_option('structure', 'lattice', ['bcc'], str,
           "Base lattice type for the structure.", multiple=True,
           valid_values=['fcc', 'bcc', 'hcp', 'a15'])
add_option('structure', 'surface', ['bcc100'], str,
           "Surface structure to generate.", multiple=True,
           valid_values=['bcc100', 'bcc110', 'bcc111', 'fcc100', 'fcc110',
                         'fcc111', 'fcc211', 'hcp0001'])
add_option('structure', 'interstitial', ['db'], str,
           "Interstitial defect to create. Usually work with bcc and fcc.",
           multiple=True, valid_values=['db', 'crw', 'tet', 'oct'])
add_option('structure', 'db_direction', ['111'], str,
           "Lattice direction along which to create a dumbbell interstitial.",
           multiple=True)
add_option('structure', 'vacancy_length', [1], int, "Number of atoms to "
           "remove in a row of vacancies.", multiple=True)
add_option('structure', 'species', 'W', str, "Chemical species identifier.")
add_option('structure', 'min_atoms', 0, int, "Minimum number of atoms that "
           "the structure should contain.")

def sats_main():
    """
    Main sats procedure. All the logic goes in here.
    """

    info("Welcome to sats_main version {0}.".format(sats.__version__))
    structures = get('structure', 'type')
    species = Element(get('structure', 'species'))
    min_atoms = get('structure', 'min_atoms')
    info("Got structures: {0}.".format(", ".join(structures)))

    for structure in structures:
        if structure == 'bulk':
            lattices = get('structure', 'lattice')
            info("Got lattices: {0}.".format(lattices))
            for lattice in lattices:
                configuration = bulk.bulk(species, lattice, min_atoms)
                configuration.info['name'] = '{0}_bulk'.format(lattice)
                info("Using structure {0}".format(configuration.info['name']))
                # Write the as-generated structure
                castep_write(configuration, configuration.info['name'],
                             optimise=True, fix_lattice=False)
                # Lattice constants from the literature so we use
                # them rather than the ones that the potential gives
                md_generate(configuration, pre_minimise=False)
        elif structure == 'surface':
            run_surfaces = get('structure', 'surface')
            info("Got surfaces {0}.".format(run_surfaces))
            for surface in run_surfaces:
                configurations = surfaces.intermediate_surfaces(species, surface)
                for idx, configuration in enumerate(configurations):
                    configuration.info['name'] = '{0}_{1}'.format(surface, idx)
                    info("Using structure {0}."
                         "".format(configuration.info['name']))
                    castep_write(configuration, configuration.info['name'],
                                 optimise=True, fix_lattice=False)
                    md_generate(configuration, pre_minimise=False)
        elif structure == 'interstitial':
            interstital_ids = []
            for lattice in get('structure', 'lattice'):
                for defect in get('structure', 'interstitial'):
                    defect_id = '{0}_{1}'.format(lattice, defect)
                    if defect == 'db':
                        for db in get('structure', 'db_direction'):
                            interstital_ids.append('{0}_{1}'.format(defect_id,
                                                                    db))
                    else:
                        interstital_ids.append(defect_id)
            info("Got interstitial defects {0}.".format(interstital_ids))
            for defect in interstital_ids:
                configuration = interstitial.interstitial(defect, species,
                                                          min_atoms=min_atoms)
                configuration.info['name'] = defect
                info("Using structure {0}.".format(configuration.info['name']))
                castep_write(configuration, configuration.info['name'],
                             optimise=True, fix_lattice=False)
                md_generate(configuration, pre_minimise=True)
        elif structure == 'vacancy':
            lattices = get('structure', 'lattice')
            info("Got lattices: {0}.".format(lattices))
            for lattice in lattices:
                rows = get('structure', 'vacancy_length')
                info("Got row lengths {0}.".format(rows))
                for row in rows:
                    configuration = vacancy.vacancy(lattice, species, row,
                                                    min_atoms=min_atoms)
                    configuration.info['name'] = '{0}_vac{1}'.format(lattice, row)
                    info("Using structure {0}".format(configuration.info['name']))
                    # Write the as-generated structure
                    castep_write(configuration, configuration.info['name'],
                                 optimise=True, fix_lattice=False)
                    # Lattice constants from the literature so we use
                    # them rather than the ones that the potential gives
                    md_generate(configuration, pre_minimise=True)


add_option('md', 'potential', 'IP FS', str, "Potential function to use to "
           "calculate the forces during molecular dynamics.")
add_option('md', 'temperature', [300.0], float, "Temperatures in Kelvin to "
           "run MD generation routines at.", multiple=True)
add_option('md', 'pressure', [0.0], float, "Pressure points in GPa to run "
           "MD generation routines at.", multiple=True)
add_option('md', 'timestep', 1.0, float, "Molecular dynamics timestep in fs.")
add_option('md', 'equilibration_time', 10.0, float, "Time in picoseconds to "
           "equilibrate the system before generating configurations.")
add_option('md', 'time_between_configurations', 1.0, float, "Time in "
           "picoseconds between writing out configurations.")
add_option('sats', 'num_configs', 20, int, "Number of configurations to "
           "derive from each initial configuration.")
add_option('structure', 'volume_rescale', [0.0], float, "Rescale the volume by "
           "the given percentage", multiple=True)

def md_generate(configuration, pre_minimise=False):
    """
    Generate new configurations using MD on the input configuration.

    Parameters
    ----------
    configuration : ase.Atoms
        Starting configuration of atoms.
    pre_minimise : bool
        Whether to run a minimisation on the structure before running the
        molecular dynamics.
    """

    potential = get('md', 'potential')
    species = Element(get('structure', 'species'))
    timestep = get('md', 'timestep')
    equilibration_steps = int((get('md', 'equilibration_time')*1000)/timestep)
    write_interval = int((get('md', 'time_between_configurations')*1000)/timestep)
    total_steps = equilibration_steps+write_interval*get('sats', 'num_configs')

    if pre_minimise:
        relax_structure(configuration, potential)

    for pressure in get('md', 'pressure'):
        # Name does not get carried over in a copy()
        p_config = configuration.copy()
        if pressure != 0.0:
            p_config.info['name'] = '{0}_{1:g}GPa'.format(
                configuration.info['name'], pressure)
        for volume in get('structure', 'volume_rescale'):
            pv_config = p_config.copy()
            if volume != 0.0:
                pv_config.info['name'] = '{0}_{1:g}pc'.format(
                    pv_config.info['name'], volume)
            for temperature in get('md', 'temperature'):
                pvt_config = pv_config.copy()
                rescale_factor = bulk_rescale_factor(species, temperature,
                                                     pressure, volume)
                pvt_config.set_cell(pvt_config.cell*rescale_factor)
                full_name = '{0}_{1:g}K'.format(pvt_config.info['name'],
                                                temperature)
                castep_write(pvt_config, full_name, optimise=True,
                             fix_lattice=True)
                molecular_dynamics(pvt_config, potential, temperature,
                                   total_steps=total_steps, timestep=timestep,
                                   write_interval=write_interval,
                                   equilibration_steps=equilibration_steps)


add_option('ui', 'help', False, bool, "Print out help information for the "
           "program, including available options.")

def ui_help():
    """
    Print program help and exit.
    """
    description = "sats structure generation tool. Generate some structures"

    print("usage: {0} [section.option=value ...]".format(sys.argv[0]))
    print("")
    print(description)
    print("")
    print("\n".join(format_defaults()))
    raise SystemExit

if __name__ == '__main__':
    if get('ui', 'help'):
        ui_help()
    else:
        sats_main()
