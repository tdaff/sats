#!/usr/bin/env python

"""
Run sats and generate some configurations. With self-interstitials.

"""

import sys

from quippy.potential import Potential, Minim
from quippy.io import AtomsWriter
from quippy.dynamicalsystem import DynamicalSystem

from sats.structures import bcc_interstitial_dumbell
from sats.structures import bcc_interstitial_crowdion
from sats.structures import bcc_interstitial_tetrahedral
from sats.structures import bcc_interstitial_octahedral

fs_lattice_parameter = 3.18
species = 74

# This is a little bit higher as python sometimes truncates 3.99
max_atoms = 55

lattice_parameter = fs_lattice_parameter
supercell = (3, 3, 3)

interstitial = sys.argv[1]

if interstitial == 'db_111':
    bulk = bcc_interstitial_dumbell(lattice_parameter, species='W',
                                    direction='111',
                                    supercell=supercell)
elif interstitial == 'db_110':
    bulk = bcc_interstitial_dumbell(lattice_parameter, species='W',
                                    direction='110',
                                    supercell=supercell)
elif interstitial == 'db_100':
    bulk = bcc_interstitial_dumbell(lattice_parameter, species='W',
                                    direction='100',
                                    supercell=supercell)
elif interstitial == 'crw':
    bulk = bcc_interstitial_crowdion(lattice_parameter, species='W',
                                     supercell=supercell)
elif interstitial == 'tet':
    bulk = bcc_interstitial_tetrahedral(lattice_parameter, species='W',
                                        supercell=supercell)
elif interstitial == 'oct':
    bulk = bcc_interstitial_octahedral(lattice_parameter, species='W',
                                       supercell=supercell)
else:
    print("Unknown interstitial {0}".format(interstitial))
    raise SystemExit

out = AtomsWriter('{0}.xyz'.format(interstitial))
out.write(bulk)

fs_potential = Potential('IP FS')
fs_potential.set_calc_args({'E_scale': 0.99519, 'r_scale': 0.99302})

bulk.set_cutoff(fs_potential.cutoff() + 2.0)
bulk.set_calculator(fs_potential)

minimiser = Minim(bulk, relax_positions=True, relax_cell=True)
minimiser.run()

out.write(bulk)

TEMPERATURE = int(sys.argv[2])
# From 10.1007/BF01184339, thermal expansion of tungsten is small, but for
# different temperatures we can expand a bit:
# 3000 K V/V0 = 1.11;
# 5000 K V/V0 = 1.29
#
if TEMPERATURE == 1000:
    bulk.set_lattice(bulk.lattice*1.003, scale_positions=True)
elif TEMPERATURE == 3000:
    bulk.set_lattice(bulk.lattice*(1.11**(1.0/3)), scale_positions=True)
elif TEMPERATURE == 5000:
    bulk.set_lattice(bulk.lattice*(1.29**(1.0/3)), scale_positions=True)

dynamical_system = DynamicalSystem(bulk)
dynamical_system.rescale_velo(TEMPERATURE)

total_steps = 1100000
timestep = 1.0  # fs
connect_interval = 200
write_interval = 20000
equilibration_steps = 100000

trajectory = 'traj_{}_{}.xyz'.format(interstitial, TEMPERATURE)
out = AtomsWriter(trajectory)

dynamical_system.atoms.calc_connect()
fs_potential.calc(dynamical_system.atoms, force=True, energy=True, virial=True)

# Basic NVE molecular dynamics
for step_number in range(1, total_steps+1):
    dynamical_system.advance_verlet1(timestep,
                                     virial=dynamical_system.atoms.virial)
    fs_potential.calc(dynamical_system.atoms, force=True,
                      energy=True, virial=True)
    dynamical_system.advance_verlet2(timestep, f=dynamical_system.atoms.force,
                                     virial=dynamical_system.atoms.virial)

    # Maintenance of the system
    if not step_number % connect_interval:
        dynamical_system.atoms.calc_connect()
        if step_number < equilibration_steps:
            dynamical_system.rescale_velo(TEMPERATURE)

    if not step_number % write_interval:
        dynamical_system.print_status(epot=dynamical_system.atoms.energy)
        dynamical_system.rescale_velo(TEMPERATURE)
        if step_number > equilibration_steps:
            out.write(dynamical_system.atoms)

out.close()
